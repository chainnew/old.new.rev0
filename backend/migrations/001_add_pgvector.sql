-- ========================================
-- pgvector Extension + Stack Templates Table
-- Phase 1C: Stack Inference Engine (A2)
-- ========================================

-- Enable pgvector extension (PostgreSQL vector similarity search)
CREATE EXTENSION IF NOT EXISTS vector;

-- Stack templates table for similarity-based inference
CREATE TABLE IF NOT EXISTS stack_templates (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title TEXT NOT NULL,
    kind TEXT NOT NULL,  -- 'fullstack', 'frontend', 'backend', 'serverless'
    stack JSONB NOT NULL,  -- {"frontend": "Next.js", "backend": "FastAPI", "db": "PostgreSQL"}
    rationale TEXT,
    tags TEXT[],  -- ['ecommerce', 'realtime', 'auth']
    embedding vector(1536),  -- OpenAI text-embedding-ada-002 dimension
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Index for vector similarity search (using cosine distance)
CREATE INDEX IF NOT EXISTS idx_stack_embedding ON stack_templates USING ivfflat (embedding vector_cosine_ops)
WITH (lists = 100);

-- Index for filtering by kind/tags
CREATE INDEX IF NOT EXISTS idx_stack_kind ON stack_templates(kind);
CREATE INDEX IF NOT EXISTS idx_stack_tags ON stack_templates USING GIN(tags);

-- ========================================
-- Seed with 5 Production Stack Templates
-- ========================================

-- Note: Embeddings are placeholders - will be generated by stack_inferencer.py
-- Run: python backend/analyzers/stack_inferencer.py --seed-embeddings

INSERT INTO stack_templates (title, kind, stack, rationale, tags, embedding) VALUES

-- 1. MERN Stack (Classic full-stack JS)
('MERN Stack', 'fullstack',
'{"frontend": "React", "backend": "Node/Express", "database": "MongoDB", "deployment": "Heroku"}',
'Modern JavaScript for rapid MVPs. NoSQL for flexible schemas. Easy deployment.',
ARRAY['mvp', 'javascript', 'nosql'],
'[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'::vector(1536)),  -- Placeholder (16 dims shown, actual 1536)

-- 2. T3 Stack (Type-safe TypeScript)
('T3 Stack', 'fullstack',
'{"frontend": "Next.js 14 App Router", "backend": "tRPC + Prisma", "database": "PostgreSQL", "auth": "NextAuth", "deployment": "Vercel"}',
'End-to-end type safety with TypeScript. tRPC for type-safe APIs. Prisma for type-safe DB.',
ARRAY['typescript', 'typesafe', 'modern'],
'[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'::vector(1536)),

-- 3. FastAPI + React (Python backend)
('FastAPI + React', 'fullstack',
'{"frontend": "React + Vite + TanStack Query", "backend": "Python/FastAPI", "database": "PostgreSQL", "deployment": "Railway + Vercel"}',
'Async Python APIs with FastAPI. React for modern UI. PostgreSQL for reliability.',
ARRAY['python', 'async', 'api-heavy'],
'[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'::vector(1536)),

-- 4. Django + Vue (Batteries-included Python)
('Django + Vue', 'fullstack',
'{"frontend": "Vue 3 + Vuex", "backend": "Python/Django + DRF", "database": "PostgreSQL", "deployment": "DigitalOcean"}',
'Django admin + ORM for rapid backend. Vue for reactive UI. Great for CRUD apps.',
ARRAY['python', 'admin', 'crud'],
'[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'::vector(1536)),

-- 5. Supabase Starter (Serverless BaaS)
('Supabase Starter', 'serverless',
'{"frontend": "Next.js 14", "backend": "Supabase (Auth + DB + Storage)", "database": "PostgreSQL (managed)", "deployment": "Vercel"}',
'Backend-as-a-Service with built-in auth, realtime, storage. Minimal server code.',
ARRAY['serverless', 'baas', 'realtime', 'auth'],
'[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'::vector(1536));

-- ========================================
-- Verify Installation
-- ========================================

SELECT
    title,
    kind,
    array_length(tags, 1) as num_tags,
    vector_dims(embedding) as embedding_dims
FROM stack_templates
ORDER BY title;

-- Expected output:
--        title        |    kind     | num_tags | embedding_dims
-- --------------------+-------------+----------+----------------
--  Django + Vue       | fullstack   |        3 |           1536
--  FastAPI + React    | fullstack   |        3 |           1536
--  MERN Stack         | fullstack   |        3 |           1536
--  Supabase Starter   | serverless  |        4 |           1536
--  T3 Stack           | fullstack   |        3 |           1536
